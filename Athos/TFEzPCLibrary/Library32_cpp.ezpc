(*

Authors: Nishant Kumar.

Copyright:
Copyright (c) 2018 Microsoft Research
Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:
The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.
THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

*)

(**************************)
def void MatMulCSF2D(int32_pl i, int32_pl j, int32_pl k, int32_al[i][j] A, int32_al[j][k] B, int32_al[i][k] C, int32_pl consSF){
	for i1=[0:i]{
		for i2=[0:k]{
			C[i1][i2] = 0;
			for i3=[0:j]{
				C[i1][i2] = C[i1][i2] +_al (A[i1][i3]*B[i3][i2]);
			};
			C[i1][i2] = C[i1][i2] >> consSF;
		};
	};
}

(**************************)
def void ArgMax1(int32_pl outArrS1, int32_pl inArrS1, int32_pl inArrS2, int32_al[inArrS1][inArrS2] inArr, int32_pl dim, int32_al[outArrS1] outArr){
	for od=[0:inArrS1]{
		int32_al maxi = inArr[od][0];
		int32_al maxiIdx = 0;
		for i=[0:inArrS2]{
			int32_pl iL = i;
			maxiIdx = (inArr[od][i] > maxi) ? iL : maxiIdx;
			maxi = (inArr[od][i] > maxi) ? inArr[od][i] : maxi;
		};
		outArr[od] = maxiIdx;
	};
}

def void ArgMax3(int32_pl outs1, int32_pl outs2, int32_pl outs3, 
			   int32_pl ins1, int32_pl ins2, int32_pl ins3, int32_pl ins4,
			   int32_al[ins1][ins2][ins3][ins4] inArr, int32_pl dim, int32_al[outs1][outs2][outs3] outArr)
{
	for iter1=[0:ins1]{
		for iter2=[0:ins2]{
			for iter3=[0:ins3]{
				int32_al maxi = inArr[iter1][iter2][iter3][0];
				int32_al maxiIdx = 0;
				for i=[0:ins4]{
					int32_pl iL = i;
					maxiIdx = (inArr[iter1][iter2][iter3][i] > maxi) ? iL : maxiIdx;
					maxi = (inArr[iter1][iter2][iter3][i] > maxi) ? inArr[iter1][iter2][iter3][i] : maxi;
				};
				outArr[iter1][iter2][iter3] = maxiIdx;
			}
		}
	}
}

(**************************)
def void Relu2(int32_pl s1, int32_pl s2, int32_al[s1][s2] inArr, int32_al[s1][s2] outArr){
	for i1=[0:s1]{
		for i2=[0:s2]{
			outArr[i1][i2] = (inArr[i1][i2] > 0 ? inArr[i1][i2] : 0);
		};
	};
}

def void Relu4(int32_pl s1, int32_pl s2, int32_pl s3, int32_pl s4, int32_al[s1][s2][s3][s4] inArr, int32_al[s1][s2][s3][s4] outArr){
	for i1=[0:s1]{
		for i2=[0:s2]{
			for i3=[0:s3]{
				for i4=[0:s4]{
					outArr[i1][i2][i3][i4] = (inArr[i1][i2][i3][i4] > 0 ? inArr[i1][i2][i3][i4] : 0);
				};
			};
		};
	};
}

def void Relu5(int32_pl s1, int32_pl s2, int32_pl s3, int32_pl s4, int32_pl s5, int32_al[s1][s2][s3][s4][s5] inArr, int32_al[s1][s2][s3][s4][s5] outArr){
	for i1=[0:s1]{
		for i2=[0:s2]{
			for i3=[0:s3]{
				for i4=[0:s4]{
					for i5=[0:s5]{
						outArr[i1][i2][i3][i4][i5] = (inArr[i1][i2][i3][i4][i5] > 0 ? inArr[i1][i2][i3][i4][i5] : 0);
					};
				};
			};
		};
	};
}

(**************************)
def void ElemWiseMul2(int32_pl s1, int32_pl s2, int32_al[s1][s2] arr1, int32_al[s1][s2] arr2, int32_al[s1][s2] outArr, int32_pl shrout){
	for i1=[0:s1]{
		for i2=[0:s2]{
			outArr[i1][i2] = ((arr1[i1][i2] * arr2[i1][i2]) >> shrout);
		};
	};
}

def void ElemWiseMul4(int32_pl s1, int32_pl s2, int32_pl s3, int32_pl s4, int32_al[s1][s2][s3][s4] arr1, int32_al[s1][s2][s3][s4] arr2, int32_al[s1][s2][s3][s4] outArr, int32_pl shrout){
	for i1=[0:s1]{
		for i2=[0:s2]{
			for i3=[0:s3]{
				for i4=[0:s4]{
					outArr[i1][i2][i3][i4] = ((arr1[i1][i2][i3][i4] * arr2[i1][i2][i3][i4]) >> shrout);
				};
			};
		};
	};
}

(**************************)
def void ElemWiseDiv2(int32_pl s1, int32_pl s2, int32_al[s1][s2] arr1, int32_al[s1][s2] arr2, int32_al[s1][s2] outArr, int32_pl shrout){
	for i1=[0:s1]{
		for i2=[0:s2]{
			outArr[i1][i2] = ((arr1[i1][i2] / arr2[i1][i2]) << shrout);
		};
	};
}

(**************************)
def void Floor2(int32_pl s1, int32_pl s2, int32_al[s1][s2] inArr, int32_al[s1][s2] outArr, int32_pl curSF){
	for i1=[0:s1]{
		for i2=[0:s2]{
			int32_pl mask = ~((1<<curSF) - 1);
			outArr[i1][i2] = (inArr[i1][i2] & mask);
		};
	};
}


(**************************)
(* int32_al[N][H][W][C] input *)
def void MaxPool(int32_pl N, int32_pl H, int32_pl W, int32_pl C,
				  int32_pl ksizeH, int32_pl ksizeW,
				  int32_pl zPadHLeft, int32_pl zPadHRight, int32_pl zPadWLeft, int32_pl zPadWRight,
				  int32_pl strideH, int32_pl strideW,
				  int32_pl N1, int32_pl imgH, int32_pl imgW, int32_pl C1,
  				  int32_al[N1][imgH][imgW][C1] inArr, 
				  int32_al[N][H][W][C] outArr){
	
	for n=[0:N]{
		for c=[0:C]{
			int32_pl leftTopCornerH = 0 - zPadHLeft;
			int32_pl extremeRightBottomCornerH = imgH - 1 + zPadHRight;
			int32_pl ctH = 0;
			while((leftTopCornerH + ksizeH - 1) <= extremeRightBottomCornerH){
				int32_pl leftTopCornerW = 0 - zPadWLeft;
				int32_pl extremeRightBottomCornerW = imgW - 1 + zPadWRight;
				int32_pl ctW = 0;
				while((leftTopCornerW + ksizeW - 1) <= extremeRightBottomCornerW){

					int32_al maxi = 0;
					if ((((leftTopCornerH < 0) || (leftTopCornerH >= imgH)) || ((leftTopCornerW < 0) || (leftTopCornerW >= imgW)))){
						maxi = 0;
					}
					else{
						maxi = inArr[n][leftTopCornerH][leftTopCornerW][c];
					};
					for fh=[0:ksizeH]{
						for fw=[0:ksizeW]{
							int32_pl curPosH = leftTopCornerH + fh;
							int32_pl curPosW = leftTopCornerW + fw;
							int32_al temp = 0;
							if ((((curPosH < 0) || (curPosH >= imgH)) || ((curPosW < 0) || (curPosW >= imgW)))){
								temp = 0;
							}
							else{
								temp = inArr[n][curPosH][curPosW][c];
							};
							maxi = ((maxi < temp) ? temp : maxi);
						};
					};

					outArr[n][ctH][ctW][c] = maxi;
					leftTopCornerW = leftTopCornerW + strideW;
					ctW = ctW + 1;
				};

				leftTopCornerH = leftTopCornerH + strideH;
				ctH = ctH + 1;
			};
		};
	};

}


(**************************)
(* int32_al[N][H][W][C] input *)
def void AvgPool(int32_pl N, int32_pl H, int32_pl W, int32_pl C,
				  int32_pl ksizeH, int32_pl ksizeW,
				  int32_pl zPadHLeft, int32_pl zPadHRight, int32_pl zPadWLeft, int32_pl zPadWRight,
				  int32_pl strideH, int32_pl strideW,
				  int32_pl N1, int32_pl imgH, int32_pl imgW, int32_pl C1,
  				  int32_al[N1][imgH][imgW][C1] inArr, 
				  int32_al[N][H][W][C] outArr){

	int32_pl rows = N*C*H*W;
	int32_al[rows] filterAvg;

	int32_pl rowIdx = 0;
	for n=[0:N]{
		for c=[0:C]{
			int32_pl leftTopCornerH = 0 - zPadHLeft;
			int32_pl extremeRightBottomCornerH = imgH - 1 + zPadHRight;
			int32_pl ctH = 0;
			while((leftTopCornerH + ksizeH - 1) <= extremeRightBottomCornerH){
				int32_pl leftTopCornerW = 0 - zPadWLeft;
				int32_pl extremeRightBottomCornerW = imgW - 1 + zPadWRight;
				int32_pl ctW = 0;
				while((leftTopCornerW + ksizeW - 1) <= extremeRightBottomCornerW){

					int32_al curFilterSum = 0;
					for fh=[0:ksizeH]{
						for fw=[0:ksizeW]{
							int32_pl curPosH = leftTopCornerH + fh;
							int32_pl curPosW = leftTopCornerW + fw;
							int32_al temp = 0;
							if ((((curPosH < 0) || (curPosH >= imgH)) || ((curPosW < 0) || (curPosW >= imgW)))){
								temp = 0;
							}
							else{
								temp = inArr[n][curPosH][curPosW][c];
							};
							curFilterSum = curFilterSum + temp;
						};
					};

					int32_pl ksizeH64 = ksizeH;
					int32_pl ksizeW64 = ksizeW;
					int32_pl filterSz64 = (ksizeH64) * (ksizeW64);
					int32_al curFilterAvg = curFilterSum/filterSz64;
					filterAvg[rowIdx] = curFilterAvg;
					rowIdx = rowIdx + 1;

					leftTopCornerW = leftTopCornerW + strideW;
					ctW = ctW + 1;
				};

				leftTopCornerH = leftTopCornerH + strideH;
				ctH = ctH + 1;
			};
		};
	};

	for n=[0:N]{
		for c=[0:C]{
			for h=[0:H]{
				for w=[0:W]{
					outArr[n][h][w][c] = filterAvg[(n*C*H*W) + (c*H*W) + (h*W) + w];
				};
			};
		};
	};

}


(**************************)
def void FusedBatchNorm4411(int32_pl s1, int32_pl s2, int32_pl s3, int32_pl s4, int32_al[s1][s2][s3][s4] inArr, int32_al[s4] multArr, int32_al[s4] biasArr, int32_pl consSF, int32_al[s1][s2][s3][s4] outputArr){
	for i1=[0:s1]{
		for i2=[0:s2]{
			for i3=[0:s3]{
				for i4=[0:s4]{
					int32_al t1 = (inArr[i1][i2][i3][i4] *_al multArr[i4]);
					int32_al t2 = (t1 >> consSF);
					outputArr[i1][i2][i3][i4] = t2 + biasArr[i4];
				};
			};
		};
	};
}

def void ReduceMean24(int32_pl outS1, int32_pl outS2, 
					  int32_pl inS1, int32_pl inS2, int32_pl inS3, int32_pl inS4, 
					  int32_al[inS1][inS2][inS3][inS4] inputArr,
					  int32_al[2] axes,
					  int32_al[outS1][outS2] outputArr
					  )
{
	for i1=[0:outS1]{
		for i2=[0:outS2]{
			int32_al summ = 0;
			for i=[0:inS2]{
				for j=[0:inS3]{
					summ = summ + inputArr[i1][i][j][i2];
				};
			};
			int32_pl numElem = inS2*inS3;
			summ = summ / numElem;
			outputArr[i1][i2] = summ;
		};
	};
}

(**************************)
def void ClearMemSecret1(int32_pl s1, int32_al[s1] arr)
{
	return;
}

def void ClearMemSecret2(int32_pl s1, int32_pl s2, int32_al[s1][s2] arr)
{
	return;
}

def void ClearMemSecret3(int32_pl s1, int32_pl s2, int32_pl s3, int32_al[s1][s2][s3] arr)
{
	return;
}

def void ClearMemSecret4(int32_pl s1, int32_pl s2, int32_pl s3, int32_pl s4, int32_al[s1][s2][s3][s4] arr)
{
	return;
}

def void ClearMemSecret5(int32_pl s1, int32_pl s2, int32_pl s3, int32_pl s4, int32_pl s5, int32_al[s1][s2][s3][s4][s5] arr)
{
	return;
}

def void ClearMemPublic2(int32_pl s1, int32_pl s2, int32_pl[s1][s2] arr)
{
	return;
}

(**************************)
def void StartComputation()
{
	return;
}

def void EndComputation()
{
	return;
}
